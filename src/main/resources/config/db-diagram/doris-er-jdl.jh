entity Institution {
  id Long
  description String required // Poloniex, XP, Exodus, Santander
}

entity Asset {
  id Long
  description String required // US Dollar, Real, Bitcoin
  code String required //USD, BRL, BTC
  symbol String // $, Â£
  type AssetType required
}

enum AssetType {
  COMMODITY, CURRENCY, FUTURE, INDICE, OPTION, STOCK
}

entity Charge {
  id Long
  description String required  //wire transfer, transaction fee
  chargeType ChargeType required
  operationType OperationType required
  amount Double required
}

enum ChargeType {
  FLAT_FEE, PERCENTAGE
}

relationship ManyToOne {
  Charge{institution(description) required} to Institution
}

relationship ManyToMany {
  Charge{asset(code)} to Asset
}

entity Portfolio {
  id Long
  description String required //Personal, Exchange A, Exchange B
}

entity Accounts {
  id Long
  description String required // Bounds, Stocks, CryptoCoins
}

relationship ManyToOne {
  Accounts{portfolio(description) required} to Portfolio{accounts}
}

relationship ManyToMany {
  Accounts{assets(code) required} to Asset,
  Accounts{institutions(description) required} to Institution
}

entity Position { //history: balance, etc
  id Long
  description String required
  balance Double required
  type PositionType required
  status PositionStatus required
}

enum PositionType {
  LONG, SHORT, FLAT
}

enum PositionStatus {
  OPEN, CLOSED
}

relationship ManyToOne {
  Position{asset(code) required} to Asset,
  Position{account(description) required} to Accounts
}

entity Operation {
  id Long
  executedAt ZonedDateTime required
  amountFrom Double required
  amountTo Double required
}

enum OperationType {
  WIRE_TRANSFER, WITHDRAW, DEPOSIT, BUY, SELL
}

relationship ManyToOne {
  Operation{positionFrom(description) required} to Position,
  Operation{institutionFrom(description) required} to Institution,
  Operation{positionTo(description) required} to Position,
  Operation{institutionTo(description) required} to Institution
}

entity Transaction {
  id Long
  executedAt ZonedDateTime required
  description String required
  amount Double required
  type TransactionType required
  balance Double required
}

enum TransactionType {
  DEBIT, CREDIT
}

relationship ManyToOne {
  Transaction{operation required} to Operation,
  Transaction{position(description) required} to Position
}

entity PositionMetric {
  id Long
  entryAvgPrice Double
  entryAmount Double
  exitAvgPrice Double
  exitAmount Double
  txCosts Double
}

relationship ManyToOne {
  PositionMetric{position(description) required} to Position{metrics},
  PositionMetric{assetComparison(code) required} to Asset
}

dto * with mapstruct

// Set service options to all
service all with serviceImpl

microservice * with doris
